# This is the hostname kickstart file

#version=DEVEL

# System authorization information
auth --enableshadow --passalgo=sha512

# Use network installation
url --url="http://172.16.1.250/"
repo --name=epel --baseurl=http://download.fedoraproject.org/pub/epel/7/x86_64

# explicitly perform an install rather than an upgrade
install

# Use graphical install
graphical

# Run the Setup Agent on first boot
firstboot --disable
ignoredisk --only-use=sda

# License agreement
eula --agreed

# Reboot after installation
reboot

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System language
lang en_US.UTF-8

# Network information
network  --bootproto=static --device=enp3s0 --gateway=172.16.1.1 --ip=172.16.1.50 --nameserver=172.16.1.1 --netmask=255.255.255.0 --ipv6=auto --activate
network  --hostname=hostname.domain.net

# Root password
rootpw --iscrypted $6_SECURED_SHA-512_HASHED_PASSWORD_HERE

# System timezone
timezone America/New_York

# New user
user --groups=wheel --name=custom_user --password=$6_SECURED_SHA-512_HASHED_PASSWORD_HERE --iscrypted --gecos="Custom User"

# X Window System configuration information
xconfig  --startxonboot

# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda

# enable/disable services
services --disabled=cups,rpcbind,postfix --enabled=fail2ban,sshd,httpd,vsftpd,libvirtd,firewalld

# Disk partitioning information
part pv.1 --fstype="lvmpv" --onpart=sda5
part /boot --fstype="xfs" --onpart=sda3
volgroup mainVG --pesize=4096 pv.1
logvol /home  --fstype="xfs" --size=40960 --name=home --vgname=mainVG
logvol /  --fstype="xfs" --size=71752 --name=root --vgname=mainVG
logvol swap  --fstype="swap" --size=2048 --name=swap --vgname=mainVG


%packages
@^graphical-server-environment
@base
@core
@desktop-debugging
@dial-up
@fonts
@gnome-desktop
@guest-agents
@guest-desktop-agents
@input-methods
@internet-browser
@multimedia
@print-client
@x11

# virtualization package group
@virtualization-hypervisor
@virtualization-client
@virtualization-platform
@virtualization-tools

kexec-tools

# extra packages needed for later configs
epel-release
git
firewalld
tmux
fail2ban
ntfs-3g
elinks
httpd
vsftpd
ssmtp
libguestfs-tools
lftp
nmap
autofs
sshpass
expect
wget

%end
%pre
#!/bin/sh

# list all volume groups and physical volumes
volgroup_list=$(lvs | sed -n '1!p' | awk ' { print $2 } ' | uniq)
pv_list=$(vgs -o pv_name | sed -n '1!p')

# deactivate and remove all volume groups
for vg in $volgroup_list
do
	lvchange -an $vg
	vgremove -y $vg
done

# remove all physical volumes
for pv in $pv_list
do
	pvremove $pv
done

# remove all partitions and partition table from SSD drive
sgdisk --zap-all /dev/sdc
partprobe /dev/sdc

drive=/dev/sda
partprobe $drive

# list with only partitions and ID types concatenated by colon
type_list=$(fdisk -l $drive | grep $drive | sed -n '1!p' | tac | sed 's/\*//' | awk ' { printf "%s:%s\n", $1, $5 } ' )

# remove all partition but the first two (with Windows installed)
for part in $type_list
do
        if [[ $(echo $part | awk -F: '{ print $1 }') == "/dev/sda1" ]] || \
                [[ $(echo $part | awk -F: '{ print $1 }') == "/dev/sda2" ]] && \
                [[ $(echo $part | awk -F: '{ print $2 }') -eq 7 ]]
        then
                echo $part SHOULD NOT BE MODIFIED HERE
        else
                num=$(echo $part | awk -F: ' { print $1 } ' | sed 's/^.*[^0-9]//')
                echo -e "d\n$num\nw" | fdisk $drive
                sleep 1
        fi
done
partprobe $drive

# create the required partitions
echo -e "n\np\n3\n\n+768M\nn\ne\n\n\nn\n\n\nt\n5\n8e\nw" | fdisk $drive
partprobe $drive

%end
%post
#!/bin/sh

# update the server
yum -y update
yum -y install yum-cron

# create root .ssh directory and set permission
mkdir /root/.ssh
chmod 700 /root/.ssh

# create private and public ssh key pair (for VMs in later main script)
ssh-keygen -q -N "" -f /root/.ssh/id_rsa

# get private key for bitbucket
wget -qO /root/.ssh/id_rsa_bitbucket http://172.16.1.250/kickstart/hostname
chmod 400 /root/.ssh/id_rsa_bitbucket

# modify the .ssh config file
echo -e "\nHost private_repo\n\tHostName bitbucket.org\n\tIdentityFile /root/.ssh/id_rsa_bitbucket\n\tUser git" >> /root/.ssh/config

# create directory for server customization
mkdir /root/firstboot

# get scripts and config files from bitbucket repo
cd /root/firstboot
eval "$(/usr/bin/ssh-agent)"
ssh-add /root/.ssh/id_rsa_bitbucket
count=1
while [ ! "$(grep ^bitbucket.org /root/.ssh/known_hosts)" ]
do
        # keep performing ssh-keyscan up to 10 times if subsequent execution fails
        if [ $count -gt 10 ]
        then
                exit 10
        fi
        ssh-keyscan -t rsa bitbucket.org >> /root/.ssh/known_hosts
        sleep 1
        let count=count+1
done
git init
git fetch private_repo:myaccount/myrepo.git
git checkout FETCH_HEAD '*-fb.*'
git checkout FETCH_HEAD 'custom_user.authorized_keys'
rm -rf .git
ssh-agent -k

# append the pub key to custom_user's authorized_keys file
mkdir /home/custom_user/.ssh
chown custom_user:custom_user /home/custom_user/.ssh
chmod 700 /home/custom_user/.ssh
cat /root/firstboot/custom_user.authorized_keys >> /home/custom_user/.ssh/authorized_keys
chown custom_user:custom_user /home/custom_user/.ssh/authorized_keys
chmod 600 /home/custom_user/.ssh/authorized_keys
rm -f /root/firstboot/custom_user.authorized_keys

# run the main script at the next reboot that'll run several other scripts
# some commands cannot execute in Anaconda chroot
chmod +x /root/firstboot/*-fb.sh
chmod +x /etc/rc.d/rc.local
echo "/bin/bash -x /root/firstboot/main-script-fb.sh 2>> /root/error.txt 1>> /root/output.txt" >> /etc/rc.d/rc.local

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

